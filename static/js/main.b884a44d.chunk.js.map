{"version":3,"sources":["components/Celda/index.js","components/Row/index.js","components/Tablero/index.js","components/BoardHead/index.js","Minesweeper.js","index.js"],"names":["Cell","props","data","isOpen","hasMine","className","onClick","open","onContextMenu","e","preventDefault","count","flag","hasFlag","Row","cells","map","index","key","Board","createBoard","board","i","rows","push","j","columns","x","y","mines","randomRow","Math","floor","random","randomCol","cell","status","Promise","resolve","findMines","then","numberOfMines","state","current","openCells","console","log","newRows","setState","openCellClick","findAroundCell","fin","cambiaNumBandera","minasCerca","row","col","length","nextProps","this","Component","BoardHead","minutes","time","seconds","formattedSeconds","flagCount","reset","Minesweeper","ganador","flags","alert","intervals","clearInterval","baseState","tick","setInterval","fn","t","handleCellClick","prevState","amount","prevProps","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b884a44d.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Cell = props => {\n  let renderCell = () => {\n    if(props.data.isOpen) {\n      if (props.data.hasMine ) {\n\n        return (\n          <div className=\"cell open\" onClick={() => props.open(props.data)} onContextMenu={e => {\n            e.preventDefault();\n          }}>\n            mina\n          </div>\n        );\n      }  else if(props.data.count === 0) {\n\n        return (\n          <div className=\"cell open\" onClick={() => props.open(props.data)} onContextMenu={e => {\n            e.preventDefault();\n            props.flag(props.data);\n          }}/>\n        );\n      } else {\n\n        return ( \n          <div className=\"cell open\" onClick={() => props.open(props.data)} onContextMenu={e => {\n            e.preventDefault();\n            props.flag(props.data);\n          }}>\n            {props.data.count}\n          </div>\n        );\n      }\n    } else if(props.data.hasFlag) {\n      return (\n        <div \n          className=\"cell open\" \n          onClick={() => props.open(props.data)} \n          onContextMenu={e => {\n            e.preventDefault();\n            props.flag(props.data);\n          }}\n        >\n          band\n        </div>\n      );\n    } else {\n\n     return (\n      <div \n        className=\"cell\" \n        onClick={() => props.open(props.data)} \n        onContextMenu={e => {\n          e.preventDefault();\n          props.flag(props.data);\n        }} \n      />\n     );\n    }\n  };\n  return renderCell();\n};\n\nexport default Cell;","import React from 'react';\nimport Cell from \"../Celda\";\n\nconst Row = props => {\n    let cells = props.cells.map((data,index) => {\n        return (\n            <Cell key={index} data={data} open={props.open} flag={props.flag}/>    \n        )\n    })\n    return (\n        <div className=\"row\">\n            {cells}\n        </div>\n    );\n};\n\nexport default Row;","import React, { Component } from \"react\";\nimport Row from \"../Row\";\n\nclass Board extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            rows: this.createBoard(props)\n        }\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if(this.props.openCells > nextProps.openCells) {\n            this.setState({\n                rows: this.createBoard(nextProps)\n            });\n        }\n        \n    }\n\n    createBoard = props => {\n        let board = [];\n        for (let i = 0; i < props.rows; i++)\n        { \n            board.push([]);\n\n            for(let j = 0; j < props.columns; j++)\n            {\n                board[i].push({\n                    x: j,\n                    y: i,\n                    count: 0,\n                    isOpen: false,\n                    hasMine: false,\n                    hasFlag: false\n                });\n            }\n\n        }\n        // despues de crear el tablero aÃ±adimos las minas\n        for(let i = 0; i< props.mines; i++)\n        {\n            let randomRow = Math.floor(Math.random() * props.rows);\n            let randomCol = Math.floor(Math.random() * props.columns);\n\n            let cell = board[randomRow][randomCol];\n\n            if(cell.hasMine){\n                i--;\n            } else{\n                cell.hasMine = true;\n            }\n        }\n\n        return board;\n    };\n\n    open = cell => {\n        if(this.props.status === \"perdiste\") {\n            return;\n        }\n\n        let asyncCountMines = new Promise(resolve => {\n            let mines = this.findMines(cell);\n            resolve(mines);\n        })\n\n        asyncCountMines.then(numberOfMines => {\n\n        let rows = this.state.rows;\n\n        let current = rows[cell.y][cell.x];\n\n\n        if(current.hasMine && this.props.openCells === 0) {\n            console.log(\"La celda tiene una mina. Intentalo de nuevo!!\");\n            let newRows = this.createBoard(this.props);\n            this.setState({\n                rows: newRows\n            }, () => {\n                this.open(cell);\n            })\n        } else {\n            if(!cell.hasFlag && !current.isOpen) { \n                this.props.openCellClick();\n\n                current.isOpen = true;\n                current.count = numberOfMines;\n\n                this.setState({rows});\n\n                if(!current.hasMine && numberOfMines === 0) {\n                    this.findAroundCell(cell);\n                }\n                if(current.hasMine && this.props.openCells !== 0) {\n                    this.props.fin();\n                }\n            }\n        }\n        })\n    };\n\n    flag = cell => {\n        if(this.props.status === \"perdiste\") {\n            return;\n        }\n\n        if(!cell.isOpen) {\n            let rows = this.state.rows;\n\n            cell.hasFlag = !cell.hasFlag;\n            this.setState({ rows });\n            this.props.cambiaNumBandera(cell.hasFlag ? -1 : 1);\n        }\n\n        \n    }\n\n    findMines = cell => {\n        let minasCerca = 0;\n        for(let row = -1; row <= 1; row++) {\n            for(let col = -1; col <= 1; col++) {\n                if(cell.y + row >= 0 && cell.x + col>= 0) {\n                    if(cell.y + row < this.state.rows.length && cell.x + col < this.state.rows[0].length) {\n                        if(this.state.rows[cell.y + row][cell.x + col].hasMine && !(row === 0 && col===0)) {\n                            minasCerca++;\n                        }\n                    }\n                }\n            }\n        }\n        return minasCerca;\n    }\n\n    findAroundCell = cell => {\n        let rows = this.state.rows;\n        for(let row = -1; row <= 1; row++) {\n            for(let col = -1; col <= 1; col++) {\n\n                if(cell.y + row >= 0 && cell.x + col>= 0) {\n                    if(cell.y + row < rows.length && cell.x + col < rows[0].length) {\n                        if(!rows[cell.y + row][cell.x + col].hasMine && \n                            !rows[cell.y + row][cell.x + col].isOpen) {\n                            this.open(rows[cell.y + row][cell.x + col]);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    render() {\n        let rows = this.state.rows.map( (row,index) => {\n            return (\n                <Row \n                  cells={row}\n                  key={index}\n                  open={this.open}\n                  flag = {this.flag}\n                />\n            )\n        })\n        return <div className=\"board\">{rows}</div>;\n    }\n}\n\nexport default Board;","import React from 'react';\n\nconst BoardHead = props => {\n    let minutes = Math.floor(props.time / 60);\n    let seconds = props.time - minutes * 60 || 0;\n\n    let formattedSeconds = seconds < 10 ? `0${seconds}` : seconds;\n    let time = `${minutes}:${formattedSeconds}`;\n    return (\n        <div className=\"board-head\">\n            <div className=\"flag-count\">Flags: { props.flagCount}</div>\n            <button className=\"reset\" onClick={props.reset}>Reset</button>\n            <div className=\"timer\">Time: {time}</div>\n        </div>\n    );\n};\n\nexport default BoardHead;","import React, { Component } from 'react';\nimport Board from \"./components/Tablero\";\nimport BoardHead from \"./components/BoardHead\";\n\nclass Minesweeper extends Component{\n  constructor() {\n    super();\n\n    this.state = {\n        status: \"waiting\",\n        rows: 10,\n        columns: 10,\n        flags: 10,\n        mines: 10,\n        time: 0,\n        openCells: 0\n    };\n    this.baseState = this.state;\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if(this.state.status === \"running\") {\n      this.ganador();\n    }\n  }\n\n  fin = () => {\n    this.setState({\n      status: \"perdiste\"\n    })\n  }\n\n  ganador = () => {\n    if(this.state.flags + this.state.openCells >= this.state.columns * this.state.rows) {\n      this.setState({\n        status: \"winner\"\n      }, alert('GANASTEEEE!!!!'))\n    }\n  }\n\n  reset = () => {\n    this.intervals.map(clearInterval);\n    this.setState({... this.baseState}, () => {\n      this.intervals = [];\n    })\n  }\n\n  componentWillMount() {\n    this.intervals = [];\n  }\n\n  tick = () => {\n    if(this.state.openCells > 0 && this.state.status === \"running\") {\n      let time = this.state.time + 1;\n      this.setState({ time })\n    }\n  }\n\n  setInterval = (fn, t) => {\n    this.intervals.push(setInterval(fn,t));\n  }\n\n  handleCellClick = () => {\n    if(this.state.openCells === 0 && this.state.status !== \"running\") {\n      this.setState({\n        status: \"running\"\n      }, () => {\n        this.setInterval(this.tick, 1000);\n      })\n    }\n\n    this.setState(prevState=>{\n      return { openCells: prevState.openCells + 1};\n    })\n  }\n\n  cambiaNumBandera = (amount) => {\n    this.setState({ flags: this.state.flags + amount})\n  }\n\n  render() {\n    return (\n      <div className=\"minesweeper\">\n        <h1>Busca Minas en React</h1>\n        <BoardHead time={this.state.time} flagCount={this.state.flags} reset={this.reset} />\n        <Board\n        status={this.state.status}\n        cambiaNumBandera={this.cambiaNumBandera}\n        fin={this.fin}\n         rows={this.state.rows} \n         columns={this.state.columns} \n         mines={this.state.mines} \n         openCells={this.state.openCells}\n         openCellClick={this.handleCellClick}\n         />\n      </div>\n    );\n  }\n}\n  \n\nexport default Minesweeper;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Minesweeper from './Minesweeper';\n\nReactDOM.render(\n    <Minesweeper />,\n  document.getElementById('root')\n);"],"sourceRoot":""}